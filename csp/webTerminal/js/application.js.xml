<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="WebTerminal/js/application.js" application="/csp/sys/" default="1"><![CDATA[
/**
 * Basic application object.
 */
var application = new function() {

    var version = "0.9.9 beta"; // link to language.js
    this.debug = false; // remove for release
    this.debugUrlPart = "172.27.25.133:57772"; // in-debug mode

    this.browser = "gc";
    this.authorizationKey = "";

    /**
     * How to make your own theme for this terminal application? Easier then ever!
     *
     * 1. Add theme name to the list below;
     * 2. Make CSS theme file like theme-default.css;
     * 3. Place this file to /css/ directory and name it "theme-<name_of_your_theme>.css";
     * 4. Check theme in settings and use it!
     *
     * We're waiting for your cool themes ;)
     *
     * @type {{number}}
     */
    this.themes = { // here you can insert theme name, but do not forget to add appropriate theme file.
        "default": 0,
        "studio": 0,
        "monokai": 0
    };

    this.version = function() { return version };

    this.HELPBOX = lang.get(49);

    var tips = 8, currentTip = 0; // number of tips
    var getTip = function(no, all) {
        var s;
        switch (no){
            case 0: s = lang.get(50); break;
            case 1: s = lang.get(51); break;
            case 2: s = lang.get(52); break;
            case 3: s = lang.get(53); break;
            case 4: s = lang.get(54); break;
            case 5: s = lang.get(55); break;
            case 6: s = lang.get(56); break;
            default: s = lang.get(57);
        }
        if (!all) {
            if (no === 0) s += lang.get(58);
            else if (no === 1) s += lang.get(59);
            else if (no === 2) s += lang.get(60);
        }
        return s;
    };

    this.getTips = function(all) {
        var s = "<div class=\"normalWrap\">";

        if (all) {
            for (var i = 0; i < tips; i++) {
                s += getTip(i, all);
            }
        } else {
            s += getTip(currentTip++, all);
            currentTip = currentTip % tips;
        }

        return s + "</div>";
    };

    var detectBrowser = function() {
        var app = navigator.appName.toLowerCase(), b = "gc";
        switch (app) {
            case "microsoft internet explorer": b = "ie"; break;
            case "google chrome": b = "gc"; break;
            case "mozilla firefox": b = "mf"; break;
            case "netscape": b = "ns"; break;
            default: log.write("unrecognised browser: " + app);
        }
        application.browser = b;
    };

    this.initialize = function() {
        detectBrowser();
        terminal.initialize();
    };

};]]></CSP>
</Export>
